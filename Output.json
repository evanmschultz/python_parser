{
    "file_path": "./sample_file.py",
    "docstring": "Example Docstring\n\nsample_something\n    sample_something_else",
    "header": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "os",
                    "as_name": null
                }
            ],
            "imported_from": null,
            "import_module_type": "STANDARD_LIBRARY"
        },
        {
            "import_names": [
                {
                    "name": "sys",
                    "as_name": "sys_alias"
                }
            ],
            "imported_from": null,
            "import_module_type": "STANDARD_LIBRARY"
        },
        {
            "import_names": [
                {
                    "name": "List",
                    "as_name": "list"
                },
                {
                    "name": "Any",
                    "as_name": null
                }
            ],
            "imported_from": "typing",
            "import_module_type": "STANDARD_LIBRARY"
        },
        {
            "import_names": [
                {
                    "name": "*",
                    "as_name": null
                }
            ],
            "imported_from": "src2.parser",
            "import_module_type": "STANDARD_LIBRARY"
        }
    ],
    "footer": [
        "# Test Footer",
        "# Footer again"
    ],
    "id": "./sample_file.py",
    "parent_id": null,
    "block_type": "MODULE",
    "block_start_line_number": 1,
    "block_end_line_number": 0,
    "code_content": "\"\"\"\nExample Docstring\n\nsample_something\n    sample_something_else\n\"\"\"\n\n# This is an example header\n# TODO: Sample TODO\nsomething = \"something\"\n\nimport os\nimport sys as sys_alias\nfrom typing import List as list, Any\nfrom src2.parser import *\n\n# Global variable\nsome_variable = \"Global Variable\"\n\n\n# Function Definitions\n@abs(123, \"er\\n\")\ndef simple_function(param1: str, param2: int):\n    \"\"\"\n    A simple function\n    \"\"\"\n    # NOTE: Sample NOTE\n    return param1 + str(param2)\n\n\n# Leading comment\n@abs(123, \"er\\n\")\n@secondary(123, \"secondary\")\n# TODO: Sample TODO\nclass SampleClass(BaseClass, metaclass=MyMeta, custom_arg=123):\n    \"\"\"\n    A sample class\n\n    Attributes:\n        attribute1 (str): Sample attribute\n        attribute2 (str): Sample attribute with default value\n    \"\"\"\n\n    class NestedClass:\n        ...\n        # NOTE: Sample NOTE\n\n    # TODO: Sample TODO\n    def __init__(self, attribute1: str, attribute2: str = \"default\") -> None:\n        self.attribute1 = attribute1\n        self.attribute2 = attribute2\n\n    def standard_method(self, param1) -> str:\n        \"\"\"\n        A sample method\n\n        args:\n            param1: Sample parameter\n\n        returns:\n            str: Sample return value\n        \"\"\"\n        return self.attribute1 + param1\n\n    # Sample class method\n    @staticmethod\n    def class_method(cls, param1: str) -> \"SampleClass\":\n        # def nested_method():\n        #     ...\n        #     # NOTE: Sample nested_method\n\n        \"\"\"\n        A sample class method\n        \"\"\"\n        return cls(param1)\n\n\n# Test\nsomething = \"something\"\n\n\nclass SecondClass2(SampleClass):\n    ...\n\n\n# Another function\ndef another_function(param: list[str], param2: Any = None, *args: str, **kwargs):\n    \"\"\"\n    Another simple function\n    \"\"\"\n    return param\n\n\ndef process_numbers(\n    arg: Union[\n        str, List[Union[int, None]], Tuple[str]\n    ],  # Position-only parameters before '/'\n    /,\n    param: List[Union[str, None, Tuple, Set, list[int]]] | None,  # Regular parameters\n    param2: Iterable[T] = \"something\",\n    *args: List[Union[str, int, None, set[str]]] | int,  # Variadic arguments\n    option1: bool = True,  # Keyword-only parameters after '*args'\n    option2: int | None = None,\n    float: float = 3.14,\n    **kwargs,\n) -> None:\n    for number in param2:\n        # Process number\n        pass\n\n\nif __name__ == \"__main__\":\n    obj = SampleClass(\"attr1\", \"attr2\")\n    result = obj.sample_method(\"param1\")\n    print(result)\n\n\n# Test Footer\n\n# Footer again\n",
    "important_comments": [
        {
            "content": "# TODO: Sample TODO",
            "comment_type": "TODO"
        },
        {
            "content": "# NOTE: Sample NOTE",
            "comment_type": "NOTE"
        },
        {
            "content": "# TODO: Sample TODO",
            "comment_type": "TODO"
        },
        {
            "content": "# NOTE: Sample NOTE",
            "comment_type": "NOTE"
        },
        {
            "content": "# TODO: Sample TODO",
            "comment_type": "TODO"
        },
        {
            "content": "#     # NOTE: Sample nested_method",
            "comment_type": "NOTE"
        }
    ],
    "dependencies": null,
    "summary": null,
    "children": [
        {
            "function_name": "simple_function",
            "docstring": "A simple function",
            "decorators": [
                {
                    "decorator_name": "abs",
                    "decorator_args": [
                        "123",
                        "\"er\\n\""
                    ]
                }
            ],
            "parameters": null,
            "returns": null,
            "is_method": false,
            "method_type": null,
            "is_async": false,
            "id": "./sample_file.py__>__simple_function",
            "parent_id": "./sample_file.py",
            "block_type": "FUNCTION",
            "block_start_line_number": 19,
            "block_end_line_number": 29,
            "code_content": "\n\n# Function Definitions\n@abs(123, \"er\\n\")\ndef simple_function(param1: str, param2: int):\n    \"\"\"\n    A simple function\n    \"\"\"\n    # NOTE: Sample NOTE\n    return param1 + str(param2)\n",
            "important_comments": [
                {
                    "content": "# NOTE: Sample NOTE",
                    "comment_type": "NOTE"
                }
            ],
            "dependencies": null,
            "summary": null,
            "children": null
        },
        {
            "class_name": "SampleClass",
            "decorators": [
                {
                    "decorator_name": "abs",
                    "decorator_args": [
                        "123",
                        "\"er\\n\""
                    ]
                },
                {
                    "decorator_name": "secondary",
                    "decorator_args": [
                        "123",
                        "\"secondary\""
                    ]
                }
            ],
            "base_classes": [
                "BaseClass"
            ],
            "class_type": "STANDARD",
            "docstring": "A sample class\n\nAttributes:\n    attribute1 (str): Sample attribute\n    attribute2 (str): Sample attribute with default value",
            "attributes": null,
            "keywords": [
                {
                    "keyword_name": "metaclass",
                    "arg_value": "MyMeta"
                },
                {
                    "keyword_name": "custom_arg",
                    "arg_value": "123"
                }
            ],
            "id": "./sample_file.py__>__SampleClass",
            "parent_id": "./sample_file.py",
            "block_type": "CLASS",
            "block_start_line_number": 29,
            "block_end_line_number": 76,
            "code_content": "\n\n# Leading comment\n@abs(123, \"er\\n\")\n@secondary(123, \"secondary\")\n# TODO: Sample TODO\nclass SampleClass(BaseClass, metaclass=MyMeta, custom_arg=123):\n    \"\"\"\n    A sample class\n\n    Attributes:\n        attribute1 (str): Sample attribute\n        attribute2 (str): Sample attribute with default value\n    \"\"\"\n\n    class NestedClass:\n        ...\n        # NOTE: Sample NOTE\n\n    # TODO: Sample TODO\n    def __init__(self, attribute1: str, attribute2: str = \"default\") -> None:\n        self.attribute1 = attribute1\n        self.attribute2 = attribute2\n\n    def standard_method(self, param1) -> str:\n        \"\"\"\n        A sample method\n\n        args:\n            param1: Sample parameter\n\n        returns:\n            str: Sample return value\n        \"\"\"\n        return self.attribute1 + param1\n\n    # Sample class method\n    @staticmethod\n    def class_method(cls, param1: str) -> \"SampleClass\":\n        # def nested_method():\n        #     ...\n        #     # NOTE: Sample nested_method\n\n        \"\"\"\n        A sample class method\n        \"\"\"\n        return cls(param1)\n",
            "important_comments": [
                {
                    "content": "# TODO: Sample TODO",
                    "comment_type": "TODO"
                },
                {
                    "content": "# NOTE: Sample NOTE",
                    "comment_type": "NOTE"
                }
            ],
            "dependencies": null,
            "summary": null,
            "children": [
                {
                    "class_name": "NestedClass",
                    "decorators": null,
                    "base_classes": null,
                    "class_type": "STANDARD",
                    "docstring": null,
                    "attributes": null,
                    "keywords": null,
                    "id": "./sample_file.py__>__SampleClass__>__NestedClass",
                    "parent_id": "./sample_file.py__>__SampleClass",
                    "block_type": "CLASS",
                    "block_start_line_number": 43,
                    "block_end_line_number": 47,
                    "code_content": "\n    class NestedClass:\n        ...\n        # NOTE: Sample NOTE\n",
                    "important_comments": [
                        {
                            "content": "# NOTE: Sample NOTE",
                            "comment_type": "NOTE"
                        }
                    ],
                    "dependencies": null,
                    "summary": null,
                    "children": null
                },
                {
                    "function_name": "__init__",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": null,
                    "is_method": false,
                    "method_type": null,
                    "is_async": false,
                    "id": "./sample_file.py__>__SampleClass__>____init__",
                    "parent_id": "./sample_file.py__>__SampleClass",
                    "block_type": "FUNCTION",
                    "block_start_line_number": 47,
                    "block_end_line_number": 52,
                    "code_content": "\n    # TODO: Sample TODO\n    def __init__(self, attribute1: str, attribute2: str = \"default\") -> None:\n        self.attribute1 = attribute1\n        self.attribute2 = attribute2\n",
                    "important_comments": [
                        {
                            "content": "# TODO: Sample TODO",
                            "comment_type": "TODO"
                        }
                    ],
                    "dependencies": null,
                    "summary": null,
                    "children": null
                },
                {
                    "function_name": "standard_method",
                    "docstring": "A sample method\n\nargs:\n    param1: Sample parameter\n\nreturns:\n    str: Sample return value",
                    "decorators": null,
                    "parameters": null,
                    "returns": null,
                    "is_method": false,
                    "method_type": null,
                    "is_async": false,
                    "id": "./sample_file.py__>__SampleClass__>__standard_method",
                    "parent_id": "./sample_file.py__>__SampleClass",
                    "block_type": "FUNCTION",
                    "block_start_line_number": 52,
                    "block_end_line_number": 64,
                    "code_content": "\n    def standard_method(self, param1) -> str:\n        \"\"\"\n        A sample method\n\n        args:\n            param1: Sample parameter\n\n        returns:\n            str: Sample return value\n        \"\"\"\n        return self.attribute1 + param1\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": null,
                    "children": null
                },
                {
                    "function_name": "class_method",
                    "docstring": "A sample class method",
                    "decorators": [
                        {
                            "decorator_name": "staticmethod",
                            "decorator_args": null
                        }
                    ],
                    "parameters": null,
                    "returns": null,
                    "is_method": false,
                    "method_type": null,
                    "is_async": false,
                    "id": "./sample_file.py__>__SampleClass__>__class_method",
                    "parent_id": "./sample_file.py__>__SampleClass",
                    "block_type": "FUNCTION",
                    "block_start_line_number": 64,
                    "block_end_line_number": 76,
                    "code_content": "\n    # Sample class method\n    @staticmethod\n    def class_method(cls, param1: str) -> \"SampleClass\":\n        # def nested_method():\n        #     ...\n        #     # NOTE: Sample nested_method\n\n        \"\"\"\n        A sample class method\n        \"\"\"\n        return cls(param1)\n",
                    "important_comments": [
                        {
                            "content": "#     # NOTE: Sample nested_method",
                            "comment_type": "NOTE"
                        }
                    ],
                    "dependencies": null,
                    "summary": null,
                    "children": null
                }
            ]
        },
        {
            "class_name": "SecondClass2",
            "decorators": null,
            "base_classes": [
                "SampleClass"
            ],
            "class_type": "STANDARD",
            "docstring": null,
            "attributes": null,
            "keywords": null,
            "id": "./sample_file.py__>__SecondClass2",
            "parent_id": "./sample_file.py",
            "block_type": "CLASS",
            "block_start_line_number": 80,
            "block_end_line_number": 84,
            "code_content": "\n\nclass SecondClass2(SampleClass):\n    ...\n",
            "important_comments": null,
            "dependencies": null,
            "summary": null,
            "children": null
        },
        {
            "function_name": "another_function",
            "docstring": "Another simple function",
            "decorators": null,
            "parameters": null,
            "returns": null,
            "is_method": false,
            "method_type": null,
            "is_async": false,
            "id": "./sample_file.py__>__another_function",
            "parent_id": "./sample_file.py",
            "block_type": "FUNCTION",
            "block_start_line_number": 84,
            "block_end_line_number": 92,
            "code_content": "\n\n# Another function\ndef another_function(param: list[str], param2: Any = None, *args: str, **kwargs):\n    \"\"\"\n    Another simple function\n    \"\"\"\n    return param\n",
            "important_comments": null,
            "dependencies": null,
            "summary": null,
            "children": null
        },
        {
            "function_name": "process_numbers",
            "docstring": null,
            "decorators": null,
            "parameters": null,
            "returns": null,
            "is_method": false,
            "method_type": null,
            "is_async": false,
            "id": "./sample_file.py__>__process_numbers",
            "parent_id": "./sample_file.py",
            "block_type": "FUNCTION",
            "block_start_line_number": 92,
            "block_end_line_number": 110,
            "code_content": "\n\ndef process_numbers(\n    arg: Union[\n        str, List[Union[int, None]], Tuple[str]\n    ],  # Position-only parameters before '/'\n    /,\n    param: List[Union[str, None, Tuple, Set, list[int]]] | None,  # Regular parameters\n    param2: Iterable[T] = \"something\",\n    *args: List[Union[str, int, None, set[str]]] | int,  # Variadic arguments\n    option1: bool = True,  # Keyword-only parameters after '*args'\n    option2: int | None = None,\n    float: float = 3.14,\n    **kwargs,\n) -> None:\n    for number in param2:\n        # Process number\n        pass\n",
            "important_comments": null,
            "dependencies": null,
            "summary": null,
            "children": null
        }
    ]
}